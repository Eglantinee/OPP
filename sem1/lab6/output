 1 //----------------------------------------------------------------
 2 //        --  Лабортаторна робота №6 Варіант 27
 3 //        --  F1: d = MAX(B + C) + MIN(A + (MA * ME)*B)
 4 //        --  F2: f = MAX(MG*MK) - MIN(ML + MН)
 5 //        --  F3: O = (MP*MR)*S + V
 6 //        --  Шкардибарда І. ІВ-82
 7 //        --  Дата 23.11.2020
 8 //----------------------------------------------------------------
 9 #include <stdio.h>
10 #include <stdlib.h>
11 #include <mpi.h>
12 #include "data.h"
   
13 //default stacksize is (default system stack size) = 8MB
14 //bind to core -->use file with spesifications rank 0=localhost soket=1
   
15 int main(int argc, char *argv[]){
16     int N = 4;
17     int rank;
18     MPI_Init(&argc, &argv);
19     MPI_Comm_rank(MPI_COMM_WORLD, &rank);
20     if (rank == 0){
21         int **MA = (int **)malloc(N * sizeof(int *));
22         int **ME = (int **)malloc(N * sizeof(int *));
23         int A[N];
24         int B[N];
25         int C[N];
26         int d;
27         for (int i = 0; i < N; ++i){
28             MA[i] = malloc(N * sizeof(int));
29             ME[i] = malloc(N * sizeof(int));
30         }
31         printf("T1 is started:\n");
32         fill_mx(MA, N, 1);
33         fill_mx(ME, N, 1);
34         fill_vect(A, N, 1);
35         fill_vect(B, N, 1);
36         fill_vect(C, N, 1);
37         d = F1(MA, ME, A, B, C, N);
38         printf("Result of F1 is %d\n", d);
39         printf("T1 is finished\n");
40     }
41     if (rank == 1){
42         int **MG = (int **)malloc(N * sizeof(int *));
43         int **MK = (int **)malloc(N * sizeof(int *));
44         int **ML = (int **)malloc(N * sizeof(int *));
45         int **MH = (int **)malloc(N * sizeof(int *));
46         int f;
47         for (int i = 0; i < N; ++i){
48             MG[i] = malloc(N * sizeof(int));
49             MK[i] = malloc(N * sizeof(int));
50             ML[i] = malloc(N * sizeof(int));
51             MH[i] = malloc(N * sizeof(int));
52         }
53         printf("T2 is started:\n");
54         fill_mx(MG, N, 2);
55         fill_mx(ML, N, 2);
56         fill_mx(MK, N, 2);
57         fill_mx(MH, N, 2);
58         f = F2(MG, MK, ML, MH, N);
59         printf("Result of F2 is %d\n", f);
60         printf("T2 is finished\n");
61     }
62     if (rank == 2){
63         int **MP = (int **)malloc(N * sizeof(int *));
64         int **MR = (int **)malloc(N * sizeof(int *));
65         int S[N];
66         int V[N];
67         int *O;
68         for (int i = 0; i < N; ++i){
69             MP[i] = malloc(N * sizeof(int));
70             MR[i] = malloc(N * sizeof(int));
71         }
72         printf("T3 is started:\n");
73         fill_mx(MP, N, 3);
74         fill_mx(MR, N, 3);
75         fill_vect(S, N, 3);
76         fill_vect(V, N, 3);
77         O = F3(MP, MR, S, V, N);
78         printf("Result of F3 is vect: ");
79         for (int i = 0; i < N; i++){
80             printf("%d ", O[i]);
81         }
82         printf("\nT3 is finished\n");
83         free(O);
84     }
85     MPI_Finalize();
86     return 0;
87 }
